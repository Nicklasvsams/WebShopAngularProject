// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebShopLibrary.DataAccessLayer.Database;

namespace WebShopLibrary.DataAccessLayer.Migrations
{
    [DbContext(typeof(WebShopDBContext))]
    partial class WebShopDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebShopLibrary.DataAccessLayer.Database.Entities.Products.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "TestCategoryDescription",
                            Name = "TestCategory"
                        },
                        new
                        {
                            Id = 2,
                            Description = "TestCategoryDescription2",
                            Name = "TestCategory2"
                        });
                });

            modelBuilder.Entity("WebShopLibrary.DataAccessLayer.Database.Entities.Products.Games.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<short>("PublishedYear")
                        .HasColumnType("smallint");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Game");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            Genre = "FirstTestGenre",
                            Language = "FirstTestLanguage",
                            ProductId = 1,
                            PublishedYear = (short)1991,
                            Publisher = "FirstTestGamePublisher"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Genre = "SecondTestGenre",
                            Language = "SecondTestLanguage",
                            ProductId = 2,
                            PublishedYear = (short)1991,
                            Publisher = "SecondTestGamePublisher"
                        });
                });

            modelBuilder.Entity("WebShopLibrary.DataAccessLayer.Database.Entities.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "TestProductDescription2",
                            Name = "TestProductName",
                            Price = 99.95m,
                            Stock = 22
                        },
                        new
                        {
                            Id = 2,
                            Description = "TestProductDescription",
                            Name = "TestProductName2",
                            Price = 599.95m,
                            Stock = 10
                        });
                });

            modelBuilder.Entity("WebShopLibrary.DataAccessLayer.Database.Entities.Transactions.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("Date");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Purchase");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            PurchaseDate = new DateTime(2022, 2, 22, 8, 4, 0, 217, DateTimeKind.Local).AddTicks(3153),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 2,
                            PurchaseDate = new DateTime(2022, 2, 22, 8, 4, 0, 219, DateTimeKind.Local).AddTicks(3314),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("WebShopLibrary.DataAccessLayer.Database.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Test@Test.test",
                            Password = "TestPassword",
                            UserType = "Admin",
                            Username = "TestUsername"
                        },
                        new
                        {
                            Id = 2,
                            Email = "Test@Test.test",
                            Password = "TestPassword2",
                            UserType = "Client",
                            Username = "TestUsername2"
                        });
                });

            modelBuilder.Entity("WebShopLibrary.DataAccessLayer.Database.Entities.Products.Games.Game", b =>
                {
                    b.HasOne("WebShopLibrary.DataAccessLayer.Database.Entities.Products.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebShopLibrary.DataAccessLayer.Database.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebShopLibrary.DataAccessLayer.Database.Entities.Transactions.Purchase", b =>
                {
                    b.HasOne("WebShopLibrary.DataAccessLayer.Database.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebShopLibrary.DataAccessLayer.Database.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
